namespace KF
{
  template<class S>
  template<class T,typename... Args>
  typename BasePredictor<S>::sp_S
  BasePredictor<S>::predict(StepCache<S>& cache,const S& inState,const Args&... args) const
  {
    // get the propagated state vector
    const StateVector& newSV   = static_cast<const T*>(this)->propagate(inState,args...);

    // get transport jacobian
    const TransportJacobian& J = static_cast<const T*>(this)->getTransportJacobian(inState,args...);
    // get process noise covariance
    const QMatrix& Q           = static_cast<const T*>(this)->getProcessNoise(inState,args...);
    // calculate predicted covariance of the state
    StateCovariance pred_cov   = J * inState.getCovariance() * J.transpose() + Q;

    // initialise predicted state object
    sp_S sp_predicted(inState.clone());
    sp_predicted->setStateVector(newSV);
    sp_predicted->setCovariance(pred_cov);

    // fill cache
    cache.setPredictedState(sp_predicted);
    cache.setJacobian(J);

    return sp_predicted;
  }  
} // end of namespace
