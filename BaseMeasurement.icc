namespace KF
{
  template<class S,int mDIM>
  typename BaseMeasurement<S,mDIM>::sp_S
  BaseMeasurement<S,mDIM>::update(const S& state) const
  {
    // get the prediction for the state
    StateVector     x_pred   = state.getStateVector();
    StateCovariance cov_pred = state.getCovariance();

    // get the gain matrix using the predicted state covariance
    KMatrix K = this->getK(cov_pred);

    // update state vector
    MeasurementVector z = this->getMeasurementVector();
    MeasurementVector x_proj = this->projectStateVector(x_pred);
    StateVector x_filtered = x_pred + K * (z - x_proj);

    // update covariance
    HMatrix H = this->getH();
    StateCovariance unit; unit.setIdentity();
    StateCovariance cov_filtered = (unit - K * H) * cov_pred;

    // clone state and set new state vector and covariance
    sp_S filtered(static_cast<S*>(state.clone()));
    filtered->setStateVector(x_filtered);
    filtered->setCovariance(cov_filtered);

    return filtered;
  }

  template<class S,int mDIM>
  typename BaseMeasurement<S,mDIM>::KMatrix
  BaseMeasurement<S,mDIM>::getK(const StateCovariance& cov) const
  {
    HMatrix H = this->getH();
    MeasurementCovariance R = this->getCovariance();
  
    return cov * H.transpose() * (H * cov * H.transpose() + R).inverse();
  };
  
  template<class S,int mDIM>
  void
  BaseMeasurement<S,mDIM>::print(std::ostream& os) const
  {
    os << "m = " << std::endl << this->getMeasurementVector() << std::endl;
    os << "cov = " << std::endl << this->getCovariance() << std::endl;
  }

  template<class S,int mDIM>
  void
  BaseMeasurement<S,mDIM>::dump(std::ostream& os) const
  {
    MeasurementVector mv = this->getMeasurementVector();
    MeasurementCovariance cov = this->getCovariance();

    for(unsigned int i = 0; i < mDIM; ++i)
      os << mv[i] << "\t";

    for(unsigned int i = 0; i < mDIM; ++i)
    {
      for(unsigned int j = i; j < mDIM; ++j)
	os << cov(i,j) << "\t";
    }
  }

  template<class S,unsigned int mDIM>
  std::ostream&
  operator<<(std::ostream& os,const BaseMeasurement<S,mDIM>& m)
  {
    m.dump(os);

    return os;
  }
}
